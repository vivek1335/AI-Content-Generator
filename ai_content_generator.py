# -*- coding: utf-8 -*-
"""AI-Content-Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arjDELEf2E6KO3DJMWtjG3nWzc2LIyRy
"""

pip install openai nltk textstat

import openai
import nltk
from nltk.tokenize import word_tokenize
import textstat
import os

from openai import OpenAI

nltk.download('punkt')

# Set up OpenAI client (new SDK format)
client = OpenAI(api_key="Your API Key here")  # replace with os.getenv() for better security

# --- Helper Functions ---

def generate_blog_post(topic, keywords):
    prompt = (
        f"Write a detailed, SEO-optimized blog post on the topic: '{topic}'. "
        f"Include a compelling introduction, keyword-rich subheadings, and a strong conclusion. "
        f"Use the following keywords throughout the blog: {', '.join(keywords)}."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

def generate_meta_description(topic, keywords):
    prompt = f"Write an SEO-friendly meta description for a blog post about '{topic}' using these keywords: {', '.join(keywords)}."
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

def keyword_density(text, keywords):
    words = word_tokenize(text.lower())
    total_words = len(words)
    density = {}
    for keyword in keywords:
        count = words.count(keyword.lower())
        density[keyword] = round((count / total_words) * 100, 2)
    return density

def readability_score(text):
    return textstat.flesch_reading_ease(text)

# --- Main Program ---

def main():
    print(" AI SEO Blog Generator")
    topic = input("Enter the blog topic: ").strip()
    keyword_input = input("Enter keywords (comma-separated): ").strip()
    keywords = [k.strip() for k in keyword_input.split(",")]

    print("\n Generating blog content...\n")
    blog = generate_blog_post(topic, keywords)
    meta = generate_meta_description(topic, keywords)
    density = keyword_density(blog, keywords)
    score = readability_score(blog)

    print(" Meta Description:")
    print(meta)

    print("\n Full Blog Content:\n")
    print(blog)

    print("\n Keyword Density:")
    for k, v in density.items():
        print(f"{k}: {v}%")

    print(f"\n Readability Score: Flesch Reading Ease = {score}")

if __name__ == "__main__":
    main()
